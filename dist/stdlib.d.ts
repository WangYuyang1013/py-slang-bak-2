import { Value } from "./cse-machine/stash";
import { ControlItem } from "./cse-machine/control";
import { Context } from "./cse-machine/context";
export declare const builtInConstants: Map<string, any>;
export declare const builtIns: Map<string, (...args: any[]) => any>;
export declare function _int(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function _int_from_string(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function abs(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function error(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function isinstance(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_acos(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_acosh(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_asin(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_asinh(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_atan(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_atan2(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_atanh(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_cos(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_cosh(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_degrees(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_erf(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_erfc(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function char_at(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_comb(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_factorial(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_gcd(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_isqrt(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_lcm(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_perm(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_ceil(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_fabs(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_floor(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_fma(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_fmod(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_remainder(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_trunc(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_copysign(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_isfinite(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_isinf(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_isnan(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_ldexp(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_nextafter(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_ulp(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_cbrt(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_exp(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_exp2(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_expm1(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_gamma(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_lgamma(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_log(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_log10(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_log1p(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_log2(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_pow(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_radians(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_sin(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_sinh(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_tan(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_tanh(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function math_sqrt(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function max(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function min(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function random_random(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function round(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function time_time(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function toPythonString(obj: Value): string;
export declare function str(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function input(args: Value[], source: string, command: ControlItem, context: Context): Value;
export declare function print(args: Value[], source: string, command: ControlItem, context: Context): void;
